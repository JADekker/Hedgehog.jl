adr_id: 004
title: "SciML Integration"
status: Accepted
date: 2025-03-27
replaces:
  - adr-004-pricer-callable-struct
  - adr-006-sciml_integration

context: |
  The original design relied on a callable `Pricer{P, M, S}` struct that invoked `compute_price(...)` internally. While this approach was functional and familiar to many quant libraries, it lacked:

  - A standardized interface for numerical methods
  - A unified abstraction for calibration, integration, or simulation-based pricing
  - Compatibility with Julia's SciML ecosystem

  SciML provides a well-established interface for numerical problem solving through:
  - `Problem` types (e.g., `ODEProblem`, `NonlinearProblem`, `IntegralProblem`)
  - `solve(problem, method)` dispatch
  - `Solution` objects with metadata, diagnostics, and result fields

  To align Hedgehog2 with modern Julia practices, we adopt a similar architecture.

decision: |
  - All pricing logic in Hedgehog2 will follow the `solve(problem, method)` pattern.
  - Define a problem type, typically a subtype of `PricingProblem{P<:AbstractPayoff, M<:AbstractMarketInputs}`.
  - A `PricingProblem` is constructed from a payoff and market data.
  - Dispatch `solve(prob, method::AbstractPricingMethod)` to compute the price.
  - Return a `PricingSolution` struct, which at minimum contains a `.price::Real` field, and may include additional solver outputs.
  - Where possible, pricing methods will delegate to solvers from the SciML ecosystem:
    - `DifferentialEquations.jl` for simulation methods
    - `NonlinearSolve.jl` for calibration/inversion
    - `Integrals.jl` or `Quadrature.jl` for Fourier pricing
  - Each pricing method is responsible for constructing an appropriate SciML-style problem (e.g., `SDEProblem`, `NonlinearProblem`, `IntegralProblem`) if applicable, and wrapping the result in a `PricingSolution`.
  - The `Pricer(...)` struct and the `compute_price(...)` function are deprecated.

consequences:
  positive:
    - "Enables compatibility with SciML tooling, logging, and differentiation"
    - "Encourages consistent structure across analytical, simulation, and numerical methods"
    - "Simplifies calibration, volatility surface inversion, and multi-method workflows"
    - "Makes it easy to extend Hedgehog2 to new solvers or problem types"
  negative:
    - "Requires rewriting existing pricing method implementations and examples"
    - "May introduce a steeper learning curve for users unfamiliar with SciML design"

examples: |
  ```julia
  # Define problem
  payoff = VanillaOption(...)
  market = BlackScholesInputs(...)
  prob = PricingProblem(payoff, market)  # payoff + market data

  # Solve it
  sol = solve(prob, BlackScholesAnalytic())
  sol.price  # Extract price
