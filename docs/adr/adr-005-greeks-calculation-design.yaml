adr_id: 003
title: "Greeks Calculation Design"
status: Draft
date: 2025-03-11
context: |
  In ADR-004, we introduced `Pricer{P, M, S}` as a callable struct that computes a derivative’s price
  using a combination of:
    - A `payoff` that subtypes `AbstractPayoff`
    - Market data (`marketInputs`) that subtypes `AbstractMarketInputs`
    - A `pricingMethod` that subtypes `AbstractPricingMethod`
  
  However, `pricer()` only returns the **price** and does not compute sensitivities (Greeks).
  Greeks measure how a derivative’s price changes with respect to input variables such as **spot price (delta)**,
  **volatility (vega)**, and **interest rates (rho)**.

  We need to design a system for Greeks computation that is modular, extensible, and maintains consistency
  with the existing API.

decision: |
  - Introduce a dedicated `GreekCalculator{G, P, M, S}` struct for computing Greeks.
  - `GreekCalculator` will be a callable struct, similar to `Pricer`, with the form:
      ```julia
      struct GreekCalculator{G, P, M, S}
          pricer::Pricer{P, M, S}
          method::G  # Specifies sensitivity computation method (Analytical, AD, Finite Difference)
      end
      ```
  - Calling `greekCalc()` will compute the specified Greek using the associated method.
  - `GreekCalculator` supports multiple calculation methods by subtyping `AbstractGreekMethod`:
      - **Analytical Greeks** (e.g., Black-Scholes formula)
      - **Automatic Differentiation (AD)** (e.g., `ForwardDiff.derivative`)
      - **Finite Difference Approximation** (e.g., bumping inputs)
  - Multiple dispatch will be used to determine the correct calculation method based on `GreekCalculator{G, P, M, S}`.

consequences:
  positive:
    - "Maintains a consistent API: Users can compute Greeks using `greekCalc()` just like `pricer()`."
    - "Modular: New sensitivity computation methods can be added by defining new `AbstractGreekMethod` subtypes."
    - "Supports different calculation approaches (Analytical, AD, Finite Difference) without modifying `Pricer`."
  negative:
    - "Requires an additional struct (`GreekCalculator`), adding minor complexity to the API."
    - "Users must instantiate `GreekCalculator` separately instead of calling `pricer()` directly for Greeks."

alternatives:
  - name: "Compute Greeks inside `Pricer`"
    pros: "Users can compute price and Greeks from the same object."
    cons: "Breaks API consistency and overloads `Pricer()` with additional functionality."

  - name: "Use standalone functions (e.g., `delta(pricer)`, `vega(pricer)`)."
    pros: "Simpler API, avoids struct overhead."
    cons: "Less modular, Greeks logic is scattered across functions."

references:
  - adr-004-pricer-callable-struct.yaml
